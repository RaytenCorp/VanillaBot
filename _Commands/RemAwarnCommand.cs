using Discord;
using Discord.Interactions;
using Discord.WebSocket;
using System.Linq;
using System.Threading.Tasks;

namespace VanillaBot;

public class RemAwarnCommand : InteractionModuleBase<SocketInteractionContext>
{
    private readonly Config _config;

    public RemAwarnCommand(Config config)
    {
        _config = config;
    }

    [SlashCommand("remawarn", "—Å–Ω—è—Ç—å –∞–≤–∞—Ä–Ω –¥–æ—Å—Ä–æ—á–Ω–æ")]
    public async Task AwarnAsync(
        [Summary("id", "–ù–æ–º–µ—Ä –∞–≤–∞—Ä–Ω–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–Ω—è—Ç –¥–æ—Å—Ä–æ—á–Ω–æ")] int ID,
        [Summary("–ø—Ä–∏—á–∏–Ω–∞", "–ü—Ä–∏—á–∏–Ω–∞ —Å–Ω—è—Ç–∏—è")] string reason)

    {
        var AwarnerUser = Context.User as SocketGuildUser;
        ulong? userid = AWarnManager.GetUserByAwarnID(ID);

        if (!userid.HasValue)
        {
            await RespondAsync("–ê–≤–∞—Ä–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", ephemeral: true);
            return;
        }

        IUser user = await Context.Client.Rest.GetUserAsync(userid.Value);
        var target = user as SocketGuildUser;

        if (AwarnerUser == null || user == null || target == null)
        {
            await RespondAsync($"–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. {AwarnerUser}; {user}; {target}", ephemeral: true);
            return;
        }
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∞
        bool canWarn = false;
        foreach (var roleId in AwarnerUser.Roles.Select(r => r.Id))
        {
            if (_config.RolePermissions.TryGetValue(roleId, out var allowedRoles) &&
                allowedRoles.Any(allowedRole => target.Roles.Any(r => r.Id == allowedRole)))
            {
                canWarn = true;
                break;
            }
        }

        if (!canWarn)
        {
            await RespondAsync("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Å–Ω—è—Ç–∏—è –∞–≤–∞—Ä–Ω–æ–≤ —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", ephemeral: true);
            return;
        }

        //–ø—Ä–æ–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
        var channel = Context.Client.GetChannel(_config.AWarnsChannelId) as IMessageChannel;
        if (channel == null)
        {
            await RespondAsync("–ö–∞–Ω–∞–ª —Å –∞–≤–∞—Ä–Ω–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.", ephemeral: true);
            return;
        }


        if (!AWarnManager.RemAwarn(ID))
        {
            await RespondAsync($"–∞–≤–∞—Ä–Ω–∞ —Å id {ID} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", ephemeral: true);
            return;
        }

        // –°–æ–∑–¥–∞–µ–º embed —Å–æ–æ–±—â–µ–Ω–∏–µ
        var embed = new EmbedBuilder()
            .WithTitle($"üôè –û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ")
            .WithDescription($"–ê–≤–∞—Ä–Ω {ID} —Å–Ω—è—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.Mention}")
            .AddField("–û–±–∂–∞–ª–æ–≤–∞–ª", $"{Context.User.Mention}", true)
            .AddField("–ü—Ä–∏—á–∏–Ω–∞", $"{reason}", false)
            .WithColor(Color.Green)
            .WithTimestamp(DateTimeOffset.Now)
            .Build();


        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º embed –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
        await channel.SendMessageAsync(embed: embed);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ
        await RespondAsync("–û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", ephemeral: true);
    }

}
